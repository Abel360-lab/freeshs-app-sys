# Generated by Django 5.2.6 on 2025-09-28 13:50

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('applications', '0032_alter_deliverycommodity_unit_of_measure'),
        ('notifications', '0005_alter_notificationtemplate_notification_type'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BulkNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Campaign name', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Campaign description')),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('SCHEDULED', 'Scheduled'), ('RUNNING', 'Running'), ('PAUSED', 'Paused'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('FAILED', 'Failed')], default='DRAFT', help_text='Campaign status', max_length=20)),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('NORMAL', 'Normal'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='NORMAL', help_text='Campaign priority', max_length=10)),
                ('channel', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS'), ('PUSH', 'Push Notification'), ('IN_APP', 'In-App Notification')], help_text='Notification channel', max_length=20)),
                ('recipient_emails', models.JSONField(default=list, help_text='List of recipient email addresses')),
                ('recipient_phones', models.JSONField(default=list, help_text='List of recipient phone numbers')),
                ('scheduled_at', models.DateTimeField(blank=True, help_text='When to start the campaign', null=True)),
                ('started_at', models.DateTimeField(blank=True, help_text='When the campaign was started', null=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the campaign was completed', null=True)),
                ('total_recipients', models.PositiveIntegerField(default=0, help_text='Total number of recipients')),
                ('processed_count', models.PositiveIntegerField(default=0, help_text='Number of notifications processed')),
                ('sent_count', models.PositiveIntegerField(default=0, help_text='Number of notifications sent successfully')),
                ('failed_count', models.PositiveIntegerField(default=0, help_text='Number of notifications failed')),
                ('delivered_count', models.PositiveIntegerField(default=0, help_text='Number of notifications delivered')),
                ('opened_count', models.PositiveIntegerField(default=0, help_text='Number of notifications opened')),
                ('batch_size', models.PositiveIntegerField(default=100, help_text='Number of notifications to send per batch')),
                ('delay_between_batches', models.PositiveIntegerField(default=5, help_text='Delay between batches in seconds')),
                ('max_retries', models.PositiveIntegerField(default=3, help_text='Maximum retry attempts per notification')),
                ('context_data', models.JSONField(default=dict, help_text='Global context data for all notifications')),
                ('personalize_by_recipient', models.BooleanField(default=False, help_text='Whether to personalize content by recipient')),
                ('total_cost', models.DecimalField(decimal_places=2, default=0.0, help_text='Total cost of the campaign', max_digits=10)),
                ('average_delivery_time', models.FloatField(default=0.0, help_text='Average delivery time in seconds')),
                ('click_through_rate', models.FloatField(default=0.0, help_text='Click-through rate percentage')),
                ('open_rate', models.FloatField(default=0.0, help_text='Open rate percentage')),
                ('last_error', models.TextField(blank=True, help_text='Last error message')),
                ('error_log', models.JSONField(default=list, help_text='List of error messages encountered')),
                ('metadata', models.JSONField(default=dict, help_text='Additional metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this campaign', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_bulk_notifications', to=settings.AUTH_USER_MODEL)),
                ('recipient_applications', models.ManyToManyField(blank=True, help_text='Applications to send notifications to', to='applications.supplierapplication')),
                ('recipient_users', models.ManyToManyField(blank=True, help_text='Users to send notifications to', to=settings.AUTH_USER_MODEL)),
                ('template', models.ForeignKey(help_text='Notification template to use', on_delete=django.db.models.deletion.CASCADE, to='notifications.notificationtemplate')),
            ],
            options={
                'verbose_name': 'Bulk Notification Campaign',
                'verbose_name_plural': 'Bulk Notification Campaigns',
                'db_table': 'notifications_bulk_notification',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(choices=[('LOW', 'Low'), ('NORMAL', 'Normal'), ('HIGH', 'High'), ('URGENT', 'Urgent')], default='NORMAL', help_text='Queue priority', max_length=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', help_text='Queue item status', max_length=20)),
                ('scheduled_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When to process this item')),
                ('processed_at', models.DateTimeField(blank=True, help_text='When this item was processed', null=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this item expires', null=True)),
                ('retry_count', models.PositiveIntegerField(default=0, help_text='Number of retry attempts')),
                ('max_retries', models.PositiveIntegerField(default=3, help_text='Maximum retry attempts')),
                ('next_retry_at', models.DateTimeField(blank=True, help_text='When to retry processing', null=True)),
                ('assigned_worker', models.CharField(blank=True, help_text='Worker assigned to process this item', max_length=100)),
                ('processing_started_at', models.DateTimeField(blank=True, help_text='When processing started', null=True)),
                ('processing_duration', models.FloatField(default=0.0, help_text='Processing duration in seconds')),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('error_code', models.CharField(blank=True, help_text='Error code', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bulk_campaign', models.ForeignKey(blank=True, help_text='Related bulk campaign', null=True, on_delete=django.db.models.deletion.CASCADE, to='notifications.bulknotification')),
                ('notification_log', models.ForeignKey(help_text='Related notification log', on_delete=django.db.models.deletion.CASCADE, to='notifications.notificationlog')),
            ],
            options={
                'verbose_name': 'Notification Queue Item',
                'verbose_name_plural': 'Notification Queue Items',
                'db_table': 'notifications_notification_queue',
                'ordering': ['priority', 'scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Service name', max_length=100, unique=True)),
                ('service_type', models.CharField(choices=[('EMAIL', 'Email Service'), ('SMS', 'SMS Service'), ('PUSH', 'Push Notification Service'), ('WEBHOOK', 'Webhook Service'), ('QUEUE', 'Notification Queue')], help_text='Type of service', max_length=20)),
                ('status', models.CharField(choices=[('RUNNING', 'Running'), ('STOPPED', 'Stopped'), ('PAUSED', 'Paused'), ('ERROR', 'Error'), ('STARTING', 'Starting'), ('STOPPING', 'Stopping'), ('MAINTENANCE', 'Maintenance')], default='STOPPED', help_text='Current service status', max_length=20)),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this service is enabled')),
                ('max_concurrent_workers', models.PositiveIntegerField(default=5, help_text='Maximum number of concurrent workers')),
                ('queue_size_limit', models.PositiveIntegerField(default=1000, help_text='Maximum queue size')),
                ('retry_attempts', models.PositiveIntegerField(default=3, help_text='Number of retry attempts')),
                ('retry_delay_seconds', models.PositiveIntegerField(default=60, help_text='Delay between retries in seconds')),
                ('description', models.TextField(blank=True, help_text='Service description')),
                ('version', models.CharField(default='1.0.0', help_text='Service version', max_length=20)),
                ('endpoint_url', models.URLField(blank=True, help_text='Service endpoint URL')),
                ('health_check_url', models.URLField(blank=True, help_text='Health check endpoint URL')),
                ('last_health_check', models.DateTimeField(blank=True, help_text='Last health check timestamp', null=True)),
                ('last_error', models.TextField(blank=True, help_text='Last error message')),
                ('error_count', models.PositiveIntegerField(default=0, help_text='Number of errors encountered')),
                ('processed_count', models.PositiveIntegerField(default=0, help_text='Number of notifications processed')),
                ('failed_count', models.PositiveIntegerField(default=0, help_text='Number of notifications failed')),
                ('average_processing_time', models.FloatField(default=0.0, help_text='Average processing time in seconds')),
                ('throughput_per_minute', models.FloatField(default=0.0, help_text='Throughput per minute')),
                ('cpu_usage_percent', models.FloatField(default=0.0, help_text='CPU usage percentage')),
                ('memory_usage_mb', models.FloatField(default=0.0, help_text='Memory usage in MB')),
                ('started_at', models.DateTimeField(blank=True, help_text='When the service was started', null=True)),
                ('stopped_at', models.DateTimeField(blank=True, help_text='When the service was stopped', null=True)),
                ('last_restart', models.DateTimeField(blank=True, help_text='Last restart timestamp', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notification Service',
                'verbose_name_plural': 'Notification Services',
                'db_table': 'notifications_notification_service',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['status'], name='notificatio_status_e3d803_idx'), models.Index(fields=['service_type'], name='notificatio_service_cdaa45_idx'), models.Index(fields=['is_enabled'], name='notificatio_is_enab_79b6d1_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='bulknotification',
            index=models.Index(fields=['status'], name='notificatio_status_c6df80_idx'),
        ),
        migrations.AddIndex(
            model_name='bulknotification',
            index=models.Index(fields=['priority'], name='notificatio_priorit_70b2ab_idx'),
        ),
        migrations.AddIndex(
            model_name='bulknotification',
            index=models.Index(fields=['scheduled_at'], name='notificatio_schedul_8ec137_idx'),
        ),
        migrations.AddIndex(
            model_name='bulknotification',
            index=models.Index(fields=['created_by'], name='notificatio_created_8920b3_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationqueue',
            index=models.Index(fields=['status'], name='notificatio_status_df8f07_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationqueue',
            index=models.Index(fields=['priority'], name='notificatio_priorit_0e44d6_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationqueue',
            index=models.Index(fields=['scheduled_at'], name='notificatio_schedul_31c710_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationqueue',
            index=models.Index(fields=['expires_at'], name='notificatio_expires_424f37_idx'),
        ),
        migrations.AddIndex(
            model_name='notificationqueue',
            index=models.Index(fields=['bulk_campaign'], name='notificatio_bulk_ca_984d8e_idx'),
        ),
    ]
